{"ast":null,"code":"var _jsxFileName = \"/Users/chris/Desktop/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Progress.js\";\nimport React from \"react\";\nimport { minutesToDuration } from \"../utils/duration\";\n\nfunction Progress({\n  mode,\n  timeRemaining,\n  isTimerRunning,\n  isSessionActive,\n  focusDuration,\n  restDuration\n}) {\n  let currentDuration = mode === 'focus' ? focusDuration : restDuration;\n  let percent = (1 - timeRemaining / (currentDuration * 60)) * 100;\n  console.log(percent);\n\n  if (!isSessionActive) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 11\n    }\n  }, mode === 'focus' ? `Focusing for ${minutesToDuration(focusDuration)} minutes` : `On Break for ${minutesToDuration(restDuration)} minutes`, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }\n  }, \"25:00 remaining\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": percent,\n    style: {\n      width: `${percent}%`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 15\n    }\n  })))));\n}\n\nexport default Progress;","map":{"version":3,"sources":["/Users/chris/Desktop/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Progress.js"],"names":["React","minutesToDuration","Progress","mode","timeRemaining","isTimerRunning","isSessionActive","focusDuration","restDuration","currentDuration","percent","console","log","height","width"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT,QAAkC,mBAAlC;;AAEA,SAASC,QAAT,CAAkB;AAACC,EAAAA,IAAD;AAAMC,EAAAA,aAAN;AAAoBC,EAAAA,cAApB;AAAmCC,EAAAA,eAAnC;AAAmDC,EAAAA,aAAnD;AAAiEC,EAAAA;AAAjE,CAAlB,EAAkG;AAC9F,MAAIC,eAAe,GAAGN,IAAI,KAAK,OAAT,GAAkBI,aAAlB,GAAiCC,YAAvD;AACA,MAAIE,OAAO,GAAG,CAAC,IAAIN,aAAa,IAAIK,eAAe,GAAC,EAApB,CAAlB,IAA6C,GAA3D;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;;AACA,MAAG,CAACJ,eAAJ,EAAqB;AACjB,WAAO,IAAP;AACH;;AACD,sBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEGH,IAAI,KAAK,OAAT,GAAoB,gBAAeF,iBAAiB,CAACM,aAAD,CAAgB,UAApE,GACC,gBAAeN,iBAAiB,CAACO,YAAD,CAAe,UAHnD,eAKE;AAAG,IAAA,SAAS,EAAC,MAAb;AAAoB,mBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBALF,CADF,CAFJ,eAaI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAA0B,IAAA,KAAK,EAAE;AAAEK,MAAAA,MAAM,EAAE;AAAV,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAC,cADZ;AAEE,IAAA,IAAI,EAAC,aAFP;AAGE,qBAAc,GAHhB;AAIE,qBAAc,KAJhB;AAKE,qBAAeH,OALjB;AAME,IAAA,KAAK,EAAE;AAACI,MAAAA,KAAK,EAAG,GAAEJ,OAAQ;AAAnB,KANT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CAbJ,CADA;AA6BH;;AAED,eAAeR,QAAf","sourcesContent":["import React from \"react\"\nimport { minutesToDuration } from \"../utils/duration\"\n\nfunction Progress({mode,timeRemaining,isTimerRunning,isSessionActive,focusDuration,restDuration}) {\n    let currentDuration = mode === 'focus'? focusDuration: restDuration;\n    let percent = (1 - timeRemaining / (currentDuration*60)) * 100\n    console.log(percent)\n    if(!isSessionActive) {\n        return null\n    }\n    return (\n    <div>\n        {/* TODO: This area should show only when a focus or break session is running or pauses */}\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\n            {mode === 'focus' ? `Focusing for ${minutesToDuration(focusDuration)} minutes`\n            :`On Break for ${minutesToDuration(restDuration)} minutes`}\n            {/* TODO: Update message below to include time remaining in the current session */}\n            <p className=\"lead\" data-testid=\"session-sub-title\">\n              25:00 remaining\n            </p>\n          </div>\n        </div>\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            <div className=\"progress\" style={{ height: \"20px\" }}>\n              <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                aria-valuenow={percent}\n                style={{width: `${percent}%`}}\n              />\n            </div>\n          </div>\n        </div>\n    </div>)\n}\n\nexport default Progress"]},"metadata":{},"sourceType":"module"}